#include <stdio.h>
#include <graphics.h>
#include <conio.h>
#include <stdlib.h>

typedef struct {
    int x, y;
} Point;

void sutherlandHodgmanClip(Point *polygon, int *vertexCount, int xmin, int ymin, int xmax, int ymax) {
    Point temp[20];
    int i, j, tempCount = 0;

    // Clip against left, right, bottom, and top boundaries successively
    for (i = 0; i < *vertexCount; i++) {
        j = (i + 1) % *vertexCount;
        Point current = polygon[i];
        Point next = polygon[j];

        // Clip against left boundary
        if (current.x >= xmin && next.x >= xmin) {
            temp[tempCount++] = next;
        } else if (current.x >= xmin && next.x < xmin) {
            temp[tempCount].x = xmin;
            temp[tempCount].y = current.y + (next.y - current.y) * (xmin - current.x) / (next.x - current.x);
            tempCount++;
        } else if (current.x < xmin && next.x >= xmin) {
            temp[tempCount].x = xmin;
            temp[tempCount].y = current.y + (next.y - current.y) * (xmin - current.x) / (next.x - current.x);
            tempCount++;
            temp[tempCount++] = next;
        }

        // Clip against right boundary
        if (current.x <= xmax && next.x <= xmax) {
            polygon[tempCount++] = next;
        } else if (current.x <= xmax && next.x > xmax) {
            temp[tempCount].x = xmax;
            temp[tempCount].y = current.y + (next.y - current.y) * (xmax - current.x) / (next.x - current.x);
            tempCount++;
        } else if (current.x > xmax && next.x <= xmax) {
            temp[tempCount].x = xmax;
            temp[tempCount].y = current.y + (next.y - current.y) * (xmax - current.x) / (next.x - current.x);
            tempCount++;
            temp[tempCount++] = next;
        }

        // Clip against bottom boundary
        *vertexCount = tempCount;
        tempCount = 0;
        for (i = 0; i < *vertexCount; i++) {
            j = (i + 1) % *vertexCount;
            current = polygon[i];
            next = polygon[j];

            if (current.y >= ymin && next.y >= ymin) {
                temp[tempCount++] = next;
            } else if (current.y >= ymin && next.y < ymin) {
                temp[tempCount].x = current.x + (next.x - current.x) * (ymin - current.y) / (next.y - current.y);
                temp[tempCount].y = ymin;
                tempCount++;
            } else if (current.y < ymin && next.y >= ymin) {
                temp[tempCount].x = current.x + (next.x - current.x) * (ymin - current.y) / (next.y - current.y);
                temp[tempCount].y = ymin;
                tempCount++;
                temp[tempCount++] = next;
            }
        }

        // Clip against top boundary
        *vertexCount = tempCount;
        tempCount = 0;
        for (i = 0; i < *vertexCount; i++) {
            j = (i + 1) % *vertexCount;
            current = polygon[i];
            next = polygon[j];

            if (current.y <= ymax && next.y <= ymax) {
                temp[tempCount++] = next;
            } else if (current.y <= ymax && next.y > ymax) {
                temp[tempCount].x = current.x + (next.x - current.x) * (ymax - current.y) / (next.y - current.y);
                temp[tempCount].y = ymax;
                tempCount++;
            } else if (current.y > ymax && next.y <= ymax) {
                temp[tempCount].x = current.x + (next.x - current.x) * (ymax - current.y) / (next.y - current.y);
                temp[tempCount].y = ymax;
                tempCount++;
                temp[tempCount++] = next;
            }
        }
    }

    // Update the polygon with the clipped vertices
    for (i = 0; i < tempCount; i++) {
        polygon[i] = temp[i];
    }
    *vertexCount = tempCount;
}

int main() {
    int n, i;
    int xmin, ymin, xmax, ymax;
    Point polygon[20];
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");

    printf("Enter number of vertices of the polygon: ");
    scanf("%d", &n);
    printf("Enter the coordinates of the polygon:\n");
    for (i = 0; i < n; i++) {
        printf("Vertex %d: ", i + 1);
        scanf("%d %d", &polygon[i].x, &polygon[i].y);
    }
    printf("Enter the clipping window (xmin, ymin, xmax, ymax): ");
    scanf("%d %d %d %d", &xmin, &ymin, &xmax, &ymax);

    setcolor(WHITE);
    for (i = 0; i < n; i++) {
        int j = (i + 1) % n;
        line(polygon[i].x, polygon[i].y, polygon[j].x, polygon[j].y);
    }

    rectangle(xmin, ymin, xmax, ymax);
    getch();
    cleardevice();

    sutherlandHodgmanClip(polygon, &n, xmin, ymin, xmax, ymax);

    setcolor(WHITE);
    for (i = 0; i < n; i++) {
        int j = (i + 1) % n;
        line(polygon[i].x, polygon[i].y, polygon[j].x, polygon[j].y);
    }

    rectangle(xmin, ymin, xmax, ymax);
    getch();
    closegraph();
    return 0;
}


Enter number of vertices of the polygon: 4
Enter the coordinates of the polygon:
Vertex 1: 100 150
Vertex 2: 200 250
Vertex 3: 300 200
Vertex 4: 200 100
Enter the clipping window (xmin, ymin, xmax, ymax): 150 150 250 200